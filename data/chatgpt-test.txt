Based on the the PostgreSQL structure included below, create sample data using postgresql insert statements meeting the follow criteria:

make at least 300 users. 2 should be site admins, 5 should be site commissioners, the rest standard users

create 30 teams

create 3 hockey leagues

give each league 2 seasons, one for fall 2024 season and one for the winter months of 2025

give each season 3-5 divisions ranging in different tiers and including divisions for all genders, men, and women

Assign at least 6 teams to each division. A team can be included in more than one division across different seasons, however, they can only be in a single division within the same season

create at least 10 games per team in each division, playing against other teams within their division

all of the games that have a date time before today should be marked as completed

Create a series of goals stats that connect with and match the score of the completed games

Create assists stats for most of the goals. Each goal can have up to 3 assists and some goals can have no assists

For each goal create a connected shots stats

For each completed game create a series of other shots and connected saves stats

For each completed game add a couple penalties stats

Here is the PostgreSQL structure:



CREATE SCHEMA league_management;

CREATE SCHEMA admin;

CREATE SCHEMA stats;



CREATE TABLE admin.users (

  user_id         SERIAL NOT NULL PRIMARY KEY,

  username        VARCHAR(50) NOT NULL UNIQUE,

  email           VARCHAR(50) NOT NULL UNIQUE,

  first_name      VARCHAR(50) NOT NULL,

  last_name       VARCHAR(50) NOT NULL,

  gender          VARCHAR(50),

  pronouns        VARCHAR(50),

  user_role       INT NOT NULL DEFAULT 3,

  password_hash   VARCHAR(100),

  status          VARCHAR(20) NOT NULL DEFAULT 'active',

  created_on      TIMESTAMP DEFAULT NOW()

);



-- user roles range from 1 - 3. 1 is a site admin, 2 is a site commissioner with permission to create leagues, and 3 is a standard user



ALTER TABLE IF EXISTS admin.users

    ADD CONSTRAINT user_status_enum CHECK (status IN ('active', 'inactive', 'suspended', 'banned'));



CREATE TABLE league_management.teams (

  team_id         SERIAL NOT NULL PRIMARY KEY,

  slug            VARCHAR(50) NOT NULL UNIQUE,

  name            VARCHAR(50) NOT NULL,

  description     TEXT,

  color           VARCHAR(50),

  join_code       VARCHAR(50) NOT NULL DEFAULT gen_random_uuid(),

  status          VARCHAR(20) NOT NULL DEFAULT 'active',

  created_on      TIMESTAMP DEFAULT NOW()

);



ALTER TABLE IF EXISTS league_management.teams

    ADD CONSTRAINT team_status_enum CHECK (status IN ('active', 'inactive', 'suspended', 'banned'));



CREATE TABLE league_management.team_memberships (

  team_membership_id    SERIAL NOT NULL PRIMARY KEY,

  user_id               INT NOT NULL,

  team_id               INT NOT NULL,

  team_role             INT DEFAULT 5,

  position              VARCHAR(50),

  number                INT,

  created_on            TIMESTAMP DEFAULT NOW()

);



-- team role range from 1 to 6 which represent in order Manager, Coach, Captain, Alternate Captain, Player, and Spare



ALTER TABLE league_management.team_memberships

ADD CONSTRAINT fk_team_memberships_user_id FOREIGN KEY (user_id)

    REFERENCES admin.users (user_id) ON DELETE CASCADE;



ALTER TABLE league_management.team_memberships

ADD CONSTRAINT fk_team_memberships_team_id FOREIGN KEY (team_id)

    REFERENCES league_management.teams (team_id) ON DELETE CASCADE;



CREATE TABLE league_management.leagues (

  league_id         SERIAL NOT NULL PRIMARY KEY,

  slug            VARCHAR(50) NOT NULL UNIQUE,

  name            VARCHAR(50) NOT NULL,

  description     TEXT,

  sport           VARCHAR(50),

  status          VARCHAR(20) NOT NULL DEFAULT 'draft',

  created_on      TIMESTAMP DEFAULT NOW()

);



ALTER TABLE IF EXISTS league_management.leagues

    ADD CONSTRAINT league_status_enum CHECK (status IN ('draft', 'public', 'archived'));



CREATE TABLE league_management.league_admins (

  league_admin_id     SERIAL NOT NULL PRIMARY KEY,

  league_role         INT NOT NULL,

  league_id           INT NOT NULL,

  user_id             INT NOT NULL,

  created_on          TIMESTAMP DEFAULT NOW()

);



-- league_role can be either 1 or 2, 1 is Commissioner and 2 is Manager



ALTER TABLE league_management.league_admins

ADD CONSTRAINT fk_league_admins_league_id FOREIGN KEY (league_id)

    REFERENCES league_management.leagues (league_id) ON DELETE CASCADE;



ALTER TABLE league_management.league_admins

ADD CONSTRAINT fk_league_admins_user_id FOREIGN KEY (user_id)

    REFERENCES admin.users (user_id) ON DELETE CASCADE;



CREATE TABLE league_management.seasons (

  season_id       SERIAL NOT NULL PRIMARY KEY,

  slug            VARCHAR(50) NOT NULL,

  name            VARCHAR(50) NOT NULL,

  description     TEXT,

  league_id       INT,

  start_date      DATE,

  end_date        DATE,

  status          VARCHAR(20) NOT NULL DEFAULT 'draft',

  created_on      TIMESTAMP DEFAULT NOW()

);



ALTER TABLE league_management.seasons

ADD CONSTRAINT fk_seasons_league_id FOREIGN KEY (league_id)

    REFERENCES league_management.leagues (league_id) ON DELETE CASCADE;



ALTER TABLE IF EXISTS league_management.seasons

    ADD CONSTRAINT season_status_enum CHECK (status IN ('draft', 'public', 'archived'));



CREATE TABLE league_management.season_admins (

  season_admin_id     SERIAL NOT NULL PRIMARY KEY,

  season_role      INT,

  season_id           INT,

  user_id             INT,

  created_on          TIMESTAMP DEFAULT NOW()

);



ALTER TABLE league_management.season_admins

ADD CONSTRAINT fk_season_admins_season_id FOREIGN KEY (season_id)

    REFERENCES league_management.seasons (season_id) ON DELETE CASCADE;



ALTER TABLE league_management.season_admins

ADD CONSTRAINT fk_season_admins_user_id FOREIGN KEY (user_id)

    REFERENCES admin.users (user_id) ON DELETE CASCADE;



CREATE TABLE league_management.divisions (

  division_id     SERIAL NOT NULL PRIMARY KEY,

  slug            VARCHAR(50) NOT NULL,

  name            VARCHAR(50) NOT NULL,

  description     TEXT,

  tier            INT,

  gender          VARCHAR(10) NOT NULL DEFAULT 'All',

  season_id       INT,

  join_code       VARCHAR(50) NOT NULL DEFAULT gen_random_uuid(),

  status          VARCHAR(20) NOT NULL DEFAULT 'draft',

  created_on      TIMESTAMP DEFAULT NOW()

);



ALTER TABLE league_management.divisions

ADD CONSTRAINT fk_divisions_season_id FOREIGN KEY (season_id)

    REFERENCES league_management.seasons (season_id) ON DELETE CASCADE;



ALTER TABLE IF EXISTS league_management.divisions

    ADD CONSTRAINT division_gender_enum CHECK (gender IN ('all', 'men', 'women'));



ALTER TABLE IF EXISTS league_management.divisions

    ADD CONSTRAINT division_status_enum CHECK (status IN ('draft', 'public', 'archived'));



CREATE TABLE league_management.division_teams (

  division_team_id    SERIAL NOT NULL PRIMARY KEY,

  division_id         INT,

  team_id             INT,

  created_on          TIMESTAMP DEFAULT NOW()

);



ALTER TABLE league_management.division_teams

ADD CONSTRAINT fk_division_teams_division_id FOREIGN KEY (division_id)

    REFERENCES league_management.divisions (division_id) ON DELETE CASCADE;



ALTER TABLE league_management.division_teams

ADD CONSTRAINT fk_division_teams_team_id FOREIGN KEY (team_id)

    REFERENCES league_management.teams (team_id) ON DELETE CASCADE;



-- division rosters consist of members of the team_membership but are a smaller sub group of players

CREATE TABLE league_management.division_rosters (

  division_roster_id    SERIAL NOT NULL PRIMARY KEY,

  division_team_id      INT,

  team_membership_id    INT,

  created_on            TIMESTAMP DEFAULT NOW()

);



ALTER TABLE league_management.division_rosters

ADD CONSTRAINT fk_division_rosters_division_team_id FOREIGN KEY (division_team_id)

    REFERENCES league_management.division_teams (division_team_id) ON DELETE CASCADE;



ALTER TABLE league_management.division_rosters

ADD CONSTRAINT fk_division_rosters_team_membership_id FOREIGN KEY (team_membership_id)

    REFERENCES league_management.team_memberships (team_membership_id) ON DELETE CASCADE;



CREATE TABLE league_management.venues (

  venue_id            SERIAL NOT NULL PRIMARY KEY,

  slug                VARCHAR(50) NOT NULL UNIQUE,

  name                VARCHAR(50) NOT NULL,

  description         TEXT,

  address             TEXT,

  created_on          TIMESTAMP DEFAULT NOW()

);



CREATE TABLE league_management.arenas (

  arena_id            SERIAL NOT NULL PRIMARY KEY,

  slug                VARCHAR(50) NOT NULL,

  name                VARCHAR(50) NOT NULL,

  description         TEXT,

  venue_id            INT NOT NULL,

  created_on          TIMESTAMP DEFAULT NOW()

);



ALTER TABLE league_management.arenas

ADD CONSTRAINT fk_arena_venue_id FOREIGN KEY (venue_id)

    REFERENCES league_management.venues (venue_id) ON DELETE CASCADE;



CREATE TABLE league_management.league_venues (

  league_venue_id     SERIAL NOT NULL PRIMARY KEY,

  venue_id            INT,

  league_id           INT,

  created_on          TIMESTAMP DEFAULT NOW()

);



ALTER TABLE league_management.league_venues

ADD CONSTRAINT fk_league_venue_venue_id FOREIGN KEY (venue_id)

    REFERENCES league_management.venues (venue_id) ON DELETE CASCADE;



ALTER TABLE league_management.league_venues

ADD CONSTRAINT fk_league_venue_league_id FOREIGN KEY (league_id)

    REFERENCES league_management.leagues (league_id) ON DELETE CASCADE;



CREATE TABLE league_management.games (

  game_id               SERIAL NOT NULL PRIMARY KEY,

  home_team_id          INT,

  home_team_score       INT DEFAULT 0,

  away_team_id          INT,

  away_team_score       INT DEFAULT 0,

  division_id           INT,

  playoff_id            INT,

  date_time             TIMESTAMP,

  arena_id              INT,

  status                VARCHAR(20) NOT NULL DEFAULT 'draft',

  has_been_published    BOOLEAN DEFAULT false,

  created_on            TIMESTAMP DEFAULT NOW()

);



ALTER TABLE league_management.games

ADD CONSTRAINT fk_game_division_id FOREIGN KEY (division_id)

    REFERENCES league_management.divisions (division_id) ON DELETE CASCADE;



ALTER TABLE league_management.games

ADD CONSTRAINT fk_game_playoff_id FOREIGN KEY (playoff_id)

    REFERENCES league_management.playoffs (playoff_id) ON DELETE CASCADE;



ALTER TABLE league_management.games

ADD CONSTRAINT fk_game_arena_id FOREIGN KEY (arena_id)

    REFERENCES league_management.arenas (arena_id);



ALTER TABLE IF EXISTS league_management.games

    ADD CONSTRAINT game_status_enum CHECK (status IN ('draft', 'public', 'completed', 'cancelled', 'postponed', 'archived'));



CREATE TABLE stats.goals (

  goal_id         SERIAL NOT NULL PRIMARY KEY,

  game_id         INT NOT NULL,

  user_id         INT NOT NULL,

  team_id         INT NOT NULL,

  period          INT,

  period_time     INTERVAL,

  shorthanded     BOOLEAN DEFAULT false,

  power_play      BOOLEAN DEFAULT false,

  empty_net       BOOLEAN DEFAULT false,

  created_on      TIMESTAMP DEFAULT NOW()

);



ALTER TABLE stats.goals

ADD CONSTRAINT fk_goals_game_id FOREIGN KEY (game_id)

    REFERENCES league_management.games (game_id) ON DELETE CASCADE;



ALTER TABLE stats.goals

ADD CONSTRAINT fk_goals_user_id FOREIGN KEY (user_id)

    REFERENCES admin.users (user_id) ON DELETE CASCADE;



ALTER TABLE stats.goals

ADD CONSTRAINT fk_goals_team_id FOREIGN KEY (team_id)

    REFERENCES league_management.teams (team_id) ON DELETE CASCADE;



CREATE TABLE stats.assists (

  assist_id       SERIAL NOT NULL PRIMARY KEY,

  goal_id         INT NOT NULL,

  game_id         INT NOT NULL,

  user_id         INT NOT NULL,

  team_id         INT NOT NULL,

  primary_assist  BOOLEAN DEFAULT true,

  created_on      TIMESTAMP DEFAULT NOW()

);



ALTER TABLE stats.assists

ADD CONSTRAINT fk_assists_goal_id FOREIGN KEY (goal_id)

    REFERENCES stats.goals (goal_id) ON DELETE CASCADE;



ALTER TABLE stats.assists

ADD CONSTRAINT fk_assists_game_id FOREIGN KEY (game_id)

    REFERENCES league_management.games (game_id) ON DELETE CASCADE;



ALTER TABLE stats.assists

ADD CONSTRAINT fk_assists_user_id FOREIGN KEY (user_id)

    REFERENCES admin.users (user_id) ON DELETE CASCADE;



ALTER TABLE stats.assists

ADD CONSTRAINT fk_assists_team_id FOREIGN KEY (team_id)

    REFERENCES league_management.teams (team_id) ON DELETE CASCADE;



CREATE TABLE stats.penalties (

  penalty_id      SERIAL NOT NULL PRIMARY KEY,

  game_id         INT NOT NULL,

  user_id         INT NOT NULL,

  team_id         INT NOT NULL,

  period          INT,

  period_time     INTERVAL,

  infraction      VARCHAR(50) NOT NULL,

  minutes         INT NOT NULL DEFAULT 2,

  created_on      TIMESTAMP DEFAULT NOW()

);



ALTER TABLE stats.penalties

ADD CONSTRAINT fk_penalties_game_id FOREIGN KEY (game_id)

    REFERENCES league_management.games (game_id) ON DELETE CASCADE;



ALTER TABLE stats.penalties

ADD CONSTRAINT fk_penalties_user_id FOREIGN KEY (user_id)

    REFERENCES admin.users (user_id) ON DELETE CASCADE;



ALTER TABLE stats.penalties

ADD CONSTRAINT fk_penalties_team_id FOREIGN KEY (team_id)

    REFERENCES league_management.teams (team_id) ON DELETE CASCADE;



CREATE TABLE stats.shots (

  shot_id         SERIAL NOT NULL PRIMARY KEY,

  game_id         INT NOT NULL,

  user_id         INT NOT NULL,

  team_id         INT NOT NULL,

  period          INT,

  period_time     INTERVAL,

  goal_id         INT,

  shorthanded     BOOLEAN DEFAULT false,

  power_play      BOOLEAN DEFAULT false,

  created_on      TIMESTAMP DEFAULT NOW()

);



ALTER TABLE stats.shots

ADD CONSTRAINT fk_shots_game_id FOREIGN KEY (game_id)

    REFERENCES league_management.games (game_id) ON DELETE CASCADE;



ALTER TABLE stats.shots

ADD CONSTRAINT fk_shots_user_id FOREIGN KEY (user_id)

    REFERENCES admin.users (user_id) ON DELETE CASCADE;



ALTER TABLE stats.shots

ADD CONSTRAINT fk_shots_team_id FOREIGN KEY (team_id)

    REFERENCES league_management.teams (team_id) ON DELETE CASCADE;



ALTER TABLE stats.shots

ADD CONSTRAINT fk_shots_goal_id FOREIGN KEY (goal_id)

    REFERENCES stats.goals (goal_id) ON DELETE CASCADE;



CREATE TABLE stats.saves (

  save_id         SERIAL NOT NULL PRIMARY KEY,

  game_id         INT NOT NULL,

  user_id         INT NOT NULL,

  team_id         INT NOT NULL,

  shot_id         INT NOT NULL,

  period          INT,

  period_time     INTERVAL,

  penalty_kill    BOOLEAN DEFAULT false,

  rebound         BOOLEAN DEFAULT false,

  created_on      TIMESTAMP DEFAULT NOW()

);



ALTER TABLE stats.saves

ADD CONSTRAINT fk_saves_game_id FOREIGN KEY (game_id)

    REFERENCES league_management.games (game_id) ON DELETE CASCADE;



ALTER TABLE stats.saves

ADD CONSTRAINT fk_saves_user_id FOREIGN KEY (user_id)

    REFERENCES admin.users (user_id) ON DELETE CASCADE;



ALTER TABLE stats.saves

ADD CONSTRAINT fk_saves_team_id FOREIGN KEY (team_id)

    REFERENCES league_management.teams (team_id) ON DELETE CASCADE;



ALTER TABLE stats.saves

ADD CONSTRAINT fk_saves_shot_id FOREIGN KEY (shot_id)

    REFERENCES stats.shots (shot_id) ON DELETE CASCADE;